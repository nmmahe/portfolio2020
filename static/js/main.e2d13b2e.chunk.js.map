{"version":3,"sources":["documents/Nick Mahe Resume February 2020.pdf","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","error","jsonReturnedValue","projects","loadedProjects","categories","fetch","then","response","json","initialProjects","filter","project","images","setState","map","key","name","className","style","primaryLanguage","height","marginBottom","type","alt","width","src","resolutions","desktop","url","summary","website","href","target","githubUrl","this","category","value","onClick","mappedProjects","languages","includes","sortCategory","Pdf","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2d13b2e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Nick Mahe Resume February 2020.8ebfc29a.pdf\";","import React, {Component} from 'react';\nimport './App.css';\nimport Pdf from './documents/Nick Mahe Resume February 2020.pdf';\n\nclass App extends Component{\n\nstate={\n      error: null,\n      jsonReturnedValue: null,\n      projects:null,\n      loadedProjects: null,\n      categories:[\n        \"All\",\n        \"Javascript\",\n        \"Python\",\n        \"MIVA\",\n        \"PHP\",\n        \"C#\",\n        \"Swift\",\n        \"SwiftUI\",\n        \"Machine Learning\",\n        \"MVC\"\n      ]\n    }\n \ncomponentDidMount() {\n    fetch('https://gitconnected.com/v1/portfolio/nmmahe')\n      .then(response => response.json())\n      .then((json) => {\n        this.initialProjects = json.projects.filter(project => project.images[0])\n        this.setState({ jsonReturnedValue: json,\n          loadedProjects: json.projects.filter(project => project.images[0]).map(project => {\n            return(    \n                // <div key={project.name} className=\"projectContainer\">\n                //   <img alt={project.name} width={project.primaryLanguage === \"Swift\" ? null: 360} height={project.primaryLanguage === \"Swift\" ? 400 : 260} src={project.images[0].resolutions.desktop.url}></img>\n                //   <div className=\"projectDescription\">\n                //     <div>\n                //     {project.name}\n                //     </div>\n                //     <div>\n                //       {project.summary}\n                //     </div>\n                //   </div>\n                // </div> \n                \n            <div key={project.name} className=\"projectContainer\">\n              <div className=\"flip-card\" style={project.primaryLanguage === \"Swift\" ? {height:'400px', marginBottom:'20px'} : null}>\n              <input type=\"checkbox\"/>\n                <div className=\"flip-card-inner\">\n                  <div className=\"flip-card-front\">\n                    <img alt={project.name} width={project.primaryLanguage === \"Swift\" ? null: 360} height={project.primaryLanguage === \"Swift\" ? 400 : 260} src={project.images[0].resolutions.desktop.url}></img>\n                  </div>\n                  <div className=\"flip-card-back\">\n                    <h1 className=\"project-name\">{project.name}</h1>\n                    \n                      <div className=\"projectDescription\">\n                        <div>\n                          {project.summary}\n                        </div>\n                        \n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"icon-container project-icon\">\n                    {project.website ? \n                    (\n                      <a href={project.website} className=\"fas fa-eye\" target=\"_blank\"></a>\n                    ) : \n                    (\n                      <a href={project.githubUrl} className=\"fab fa-github\" target=\"_blank\"></a>\n                    )} \n                  </div>\n                </div>\n            </div>\n            )\n          }),\n          projects: json.projects.filter(project => project.images[0]) \n        });\n      } \n    )\n  }\n  render(){\n    const sortCategory = (category) => {\n\n        const filteredProjects = category === \"All\" ? this.state.projects : \n        this.state.projects.filter(project => {\n          return project.languages.includes(category) \n        })\n        const mappedProjects = filteredProjects.map(project => {\n          return (\n            <div key={project.name} className=\"projectContainer\">\n              <div className=\"flip-card\" style={project.primaryLanguage === \"Swift\" ? {height:'400px', marginBottom:'20px'} : null}>\n              <input type=\"checkbox\"/>\n                <div className=\"flip-card-inner\">\n                  <div className=\"flip-card-front\">\n                    <img alt={project.name} width={project.primaryLanguage === \"Swift\" ? null: 360} height={project.primaryLanguage === \"Swift\" ? 400 : 260} src={project.images[0].resolutions.desktop.url}></img>\n                  </div>\n                  <div className=\"flip-card-back\">\n                    <h1 className=\"project-name\">{project.name}</h1>\n                    \n                      <div className=\"projectDescription\">\n                        <div>\n                          {project.summary}\n                        </div>\n                        <div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"icon-container project-icon\">\n                    {project.website ? \n                    (\n                      <a href={project.website} className=\"fas fa-eye\"></a>\n                    ) : \n                    (\n                      <a href={project.githubUrl} className=\"fab fa-github\"></a>\n                    )} \n                  </div>\n                </div>\n            </div>\n          )\n        })\n\n      this.setState({\n        loadedProjects: mappedProjects\n      })\n    }\n\n    const categories = this.state.categories.map(category => {\n      return(\n        <button className=\"filter-button\" key={category} value={category} onClick={(category) => sortCategory(category.target.value)}>{category}</button>\n      );\n    })\n\n    return (\n<div>\n      <div className=\"site-header\">\n      <div className=\"shadow-overlay\">\n          <div className=\"site-header-grid\">\n              <div className=\"site-header-item1\">\n                  Hello, \n                  <br/>\n                  I'm Nick Mahe.\n                  <br/>\n                  Full-stack developer\n              </div>\n              <div className=\"site-header-item2\">\n                  <div className=\"contact-header\">\n                    Contact Me\n                  </div>\n                  <div className=\"contact-container\">\n                    <a href=\"mailto:nicholasmahe@gmail.com\">\n                      Email: nicholasmahe@gmail.com\n                    </a>\n                    <div className=\"resume-link\">\n                      <a href={Pdf} target=\"_blank\">See my resume</a>\n                    </div>\n                    <div className=\"icon-container\">\n                      <a href=\"https://www.linkedin.com/in/nicholas-mahe\" className=\"fab fa-linkedin-in\"></a>\n                      <a href=\"https://github.com/nmmahe\" className=\"fab fa-github\"></a>\n                      <a href=\"https://www.facebook.com/nick.m.mahe\" className=\"fab fa-facebook\"></a>\n                    </div>\n                  </div>\n              </div>\n          </div>\n          <div className=\"site-header-scroll\">\n              Press to Scroll Down\n          </div>\n          <div className=\"arrow bounce site-header-scroll \">\n              <a href=\"#main-container\" className=\"fa fa-arrow-down fa-2x\"></a>\n          </div>\n      </div> \n  </div>\n\n      <div id=\"main-container\" className=\"main-container\">\n        <div className=\"wrapper\">\n        <div className=\"title\">\n          Welcome,\n        </div>\n        <em><div className=\"subtitle\">\n          I love building applications and searching for ways to automate processes and be innovative. I have industry experience in several \n          front and back-end technologies, creating professional, user-friendly websites and applications, as well as experience working face-to-face with clients and on a team. \n        </div>\n        </em>\n      <div>\n        <h1 className=\"projects-main-title\">Projects</h1>\n        {categories}\n      </div>\n        <div className=\"projects-grid\">\n        \n        {this.state.jsonReturnedValue ? this.state.loadedProjects : \"Loading\"}\n        </div>\n      </div>\n      </div>\n</div>\n     );\n\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}